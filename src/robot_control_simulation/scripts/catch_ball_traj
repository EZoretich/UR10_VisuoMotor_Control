#!/usr/bin/env python3

#---------------Import Libraries and msgs---------------:

import rospy
import time
import math
import numpy as np
from std_msgs.msg import *
from geometry_msgs.msg import *
import tf2_msgs.msg
from tf.transformations import euler_from_quaternion
from collections import Counter
from control_lib import UR_Controller


#---------------Initialise---------------:

print("Please Wait While System Starts Up...")
rospy.init_node("example_assignment", anonymous=False)
ur_script = rospy.Publisher('/ur_hardware_interface/script_command', String, queue_size=10)
ur_con = UR_Controller()
time.sleep(2)
print("System Started")

#---------------Define Variables---------------:

#Move J's are faster, since precision isn't the goal
max_acc = 1.0
max_vel = 1.0
header = "def myProg():"
footer = "\nend"

#Create points for Move J's by converting joint angles into rads
waypoint1 = [-0.29635690698863715, -1.7847736930894016, -1.4852751934471744, -1.4051645807806348, 1.577428577952475, -1.8694221618111264]
waypoint2 = [0.13351768777756623, -1.4756758825612055, -1.7125170620568362, -1.4864969239235706, 1.5482815794441696, -1.4395475670449231]
waypoint3 = [0.72640603468004, -1.4236650708517744, -1.560847950058529, -1.7058848108992577, 1.5320500174006224, -0.8459610884416515]
home_waypoint = [-1.58825, -1.71042, -2.19911, -0.802851, 1.58825, -0.03106686]

#Add them to ordered list to move to them one by one
waypoints = [waypoint1, waypoint2, waypoint3]

def home_robot():
	header = "def myProg():"
	footer = "\nend"
	home_waypoint = [-1.58825, -1.71042, -2.19911, -0.802851, 1.58825, -0.03106686]
	move_msg ="\nmovej({},a={},v={},t={},r={})".format(home_waypoint, max_acc ,max_vel,0,0)
	command = header + move_msg + footer
	return command

def check_errors():
	my_pos = ur_con.get_pose()
	errors = ur_con.check_errors(my_pos)
	cart_error = errors.ee_trans_error
	rot_error = errors.ee_rot_error
	ball_caught = errors.ball_caught
	print("Cartesian error:", (errors.ee_trans_error),"m") #Directional error in meters
	print("Orientational error:", errors.ee_rot_error, "degrees") #Rotational error in degrees
	print("Ball caught:",errors.ball_caught) #Boolean tell that tells us if the ball was caught or not
	return errors


#---------------Main Code---------------:
# ------- Home (Send the robot to default position (initial)
command = home_robot()
ur_script.publish(command)
# Home robot
'''home_waypoint = [-1.58825, -1.71042, -2.19911, -0.802851, 1.58825, -0.03106686]
command = ur_con.generate_move_j(home_waypoint)
ur_script.publish(command)
time.sleep(5) # TO DO replace this with check'''

'''my_pos = ur_con.get_pose()
errors = ur_con.check_errors(my_pos)
cart_error = errors.ee_trans_error
rot_error = errors.ee_rot_error
ball_caught = errors.ball_caught'''

my_pos = ur_con.get_pose()
errors = ur_con.check_errors(my_pos)
print(my_pos)
print("Cartesian error:", (errors.ee_trans_error),"m") #Directional error in meters
print("Orientational error:", errors.ee_rot_error, "degrees") #Rotational error in degrees
print("Ball caught:",errors.ball_caught)

'''while ball_caught == False:
	new_error = error'''
	

# Some code that checks error and moves accordingly
for i in range(0,2):

	# Move L
	my_pos = ur_con.get_pose()
	#my_pos.position.x += 0.1
	#my_pos.position.y += 0.1
	my_pos.position.z += 0.1
	command = ur_con.generate_move_l(my_pos)
	ur_script.publish(command)
	time.sleep(2)
	
	my_pos = ur_con.get_pose()
	errors = ur_con.check_errors(my_pos)
	print(my_pos)
	print("Cartesian error:", (errors.ee_trans_error),"m") #Directional error in meters
	print("Orientational error:", errors.ee_rot_error, "degrees") #Rotational error in degrees
	print("Ball caught:",errors.ball_caught) #Boolean tell that tells us if the ball was caught or not


'''#### MAKE A SQUARE WITH THE ROBOT ####
target_pos = ur_con.get_pose()
target_pos.position.y += 0.15
command = ur_con.generate_move_l(target_pos)
ur_script.publish(command)
ur_con.tar_check(target_pos)

target_pos = ur_con.get_pose()
target_pos.position.z += 0.15
command = ur_con.generate_move_l(target_pos)
ur_script.publish(command)
ur_con.tar_check(target_pos)

target_pos = ur_con.get_pose()
target_pos.position.y -= 0.15
command = ur_con.generate_move_l(target_pos)
ur_script.publish(command)
ur_con.tar_check(target_pos)

target_pos = ur_con.get_pose()
target_pos.position.z -= 0.15
command = ur_con.generate_move_l(target_pos)
ur_script.publish(command)
ur_con.tar_check(target_pos)'''
